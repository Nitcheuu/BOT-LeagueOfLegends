import cv2 as cv
import numpy as np
import sys

np.set_printoptions(threshold=sys.maxsize)


def find_click_positions(target_image_path, super_image_path, seuil=0.5, debug_mode=None):

    target_image = cv.imread(target_image_path, cv.IMREAD_UNCHANGED)
    super_image = cv.imread(super_image_path, cv.IMREAD_UNCHANGED)
    target_image_xw = target_image.shape[1]
    target_image_yh = target_image.shape[0]
    method = cv.TM_CCOEFF_NORMED
    result = cv.matchTemplate(super_image, target_image, method)

    locations = np.where(result >= seuil)

    # convertir les matrices en tuples
    locations = list(zip(*locations[::-1]))
    # print(locations)

    rectangles = []
    for loc in locations:
        rect = [int(loc[0]), int(loc[1]), target_image_xw, target_image_yh]
        rectangles.append(rect)
        rectangles.append(rect)

    rectangles, weights = cv.groupRectangles(rectangles, 1, 0.5)
    # print(rectangles)

    points = []
    if len(rectangles):
        print("Objet trouv√© !")

        line_color = (0, 255, 0)
        line_type = cv.LINE_4
        marker_color = (0, 0, 255)
        marker_type = cv.MARKER_CROSS
        for (x, y, w, h) in rectangles:
            center_x = x + int(w / 2)
            center_y = y + int(h / 2)
            points.append((center_x, center_y))
            if debug_mode == "rectangles":
                top_left = (x, y)
                bottom_right = (x + w, y + h)
                cv.rectangle(super_image, top_left, bottom_right, line_color, line_type)
            elif debug_mode == "points":
                cv.drawMarker(super_image, (center_x, center_y), marker_color, marker_type)

        if debug_mode:
            cv.imshow("Match", super_image)
            cv.waitKey()

    return points


points = find_click_positions("lol_little_button.PNG", "lol_menu_gamemode.PNG", seuil=0.65, debug_mode="points")
print(points)
